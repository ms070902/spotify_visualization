# Load required libraries
library(dplyr)
library(ggplot2)
# Read the dataset
data <- read.csv("spotify-2023.csv")
# Summary statistics and structure of the dataset
str(data)
summary(data)
# Data cleaning and transformation
data <- data %>%
mutate(release_date = as.Date(paste(released_year, released_month, released_day, sep = "-"))) %>%
select(-released_year, -released_month, -released_day)
# Top 10 most played songs
top_songs <- data %>%
arrange(desc(streams)) %>%
head(10)
# Time of the year when most songs were released
release_counts <- data %>%
mutate(month = format(release_date, "%B")) %>%
group_by(month) %>%
summarise(song_count = n()) %>%
# Time of the year when most songs were released
release_counts <- data %>%
mutate(month = format(release_date, "%B")) %>%
group_by(month) %>%
summarise(song_count = n()) %>%
arrange(desc(song_count))
# Prepare the data for the pie chart
playlist_counts <- data %>%
select(in_spotify_playlists, in_apple_playlists, in_deezer_playlists) %>%
summarise(
Spotify = sum(as.numeric(in_spotify_playlists)),
Apple = sum(as.numeric(in_apple_playlists)),
Deezer = sum(as.numeric(in_deezer_playlists))
)
# Create a data frame for the pie chart
playlist_data <- data.frame(
Playlist = c("Spotify", "Apple", "Deezer"),
Count = c(playlist_counts$Spotify, playlist_counts$Apple, playlist_counts$Deezer)
)
# Create the pie chart
pie_chart <- ggplot(playlist_data, aes(x = "", y = Count, fill = Playlist)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "Songs in Different Playlists")
# Customize the appearance of the pie chart
pie_chart +
theme_minimal() +
theme(legend.position = "right") +
scale_fill_brewer(palette = "Set3")  # You can choose a different color palette
ggplot(top_songs, aes(x = reorder(track_name, streams), y = streams)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Most Played Songs")
ggplot(release_counts, aes(x = month, y = song_count)) +
geom_bar(stat = "identity") +
labs(title = "Song Releases by Month")
# Plot song releases by month
ggplot(release_counts, aes(x = month, y = song_count)) +
geom_bar(stat = "identity") +
labs(title = "Song Releases by Month")
# Time of the year when most songs were released
release_counts <- data %>%
mutate(month = format(release_date, "%B")) %>%
group_by(month) %>%
summarise(song_count = n()) %>%
arrange(desc(song_count))
# Plot song releases by month
ggplot(release_counts, aes(x = month, y = song_count)) +
geom_bar(stat = "identity") +
labs(title = "Song Releases by Month")
numeric_data <- data %>%
select(bpm, danceability_., valence_., energy_., acousticness_., instrumentalness_., liveness_., speechiness_.)
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data)
# Create a heatmap using ggplot2
ggplot(data = as.data.frame(as.table(correlation_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Heatmap")
boxplot_plot <- ggplot(data, aes(x = artist.s._name, y = streams)) +
geom_boxplot(fill = "blue", color = "black") +
labs(title = "Box Plot of Streams by Artist", x = "Artist", y = "Streams") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
library(readr)
spotify_2023 <- read_csv("spotify-2023.csv")
View(spotify_2023)
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
# Top 10 most played songs
top_songs <- data %>%
arrange(desc(streams)) %>%
head(10)
ggplot(top_songs, aes(x = reorder(track_name, streams), y = streams)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Most Played Songs")
View(spotify_2023)
release_counts <- data %>%
mutate(month = format(release_date, "%B")) %>%
group_by(month) %>%
summarise(song_count = n()) %>%
arrange(desc(song_count))
ggplot(release_counts, aes(x = month, y = song_count)) +
geom_bar(stat = "identity") +
labs(title = "Song Releases by Month")
numeric_data <- data %>%
select(bpm, danceability_., valence_., energy_., acousticness_., instrumentalness_., liveness_., speechiness_.)
boxplot_plot <- ggplot(data, aes(x = artist.s._name, y = streams)) +
geom_boxplot(fill = "blue", color = "black") +
labs(title = "Box Plot of Streams by Artist", x = "Artist", y = "Streams") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(boxplot_plot)
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
# Read the dataset
data <- read.csv("spotify-2023.csv")
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
line_plot <- data %>%
group_by(released_year) %>%
summarise(mean_streams = mean(streams)) %>%
ggplot(aes(x = released_year, y = mean_streams)) +
geom_line(color = "blue") +
labs(title = "Change in Streams Over the Years", x = "Year", y = "Mean Streams")
scatter_plot <- ggplot(data, aes(x = valence_., y = danceability_)) +
geom_point() +
labs(title = "Scatter Plot of Valence vs. Danceability", x = "Valence (%)", y = "Danceability (%)")
# Time Series Plot: Change in streams over time
time_series_plot <- ggplot(data, aes(x = as.Date(paste(released_year, released_month, released_day, sep = "-")), y = streams)) +
geom_line(color = "blue") +
labs(title = "Change in Streams Over Time", x = "Date", y = "Streams")
violin_plot <- ggplot(data, aes(x = in_spotify_playlists, y = streams)) +
geom_violin(fill = "blue") +
labs(title = "Distribution of Streams by Spotify Playlists", x = "In Spotify Playlists", y = "Streams")
stacked_bar_plot <- data %>%
group_by(key) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(key), y = song_count, fill = as.factor(key))) +
geom_bar(stat = "identity") +
labs(title = "Composition of Songs by Key", x = "Key", y = "Song Count")
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
plot_grid(boxplot_plot, bar_plot, line_plot, scatter_plot, time_series_plot, violin_plot, stacked_bar_plot, ncol = 2)
install.packages("cowplot")
library(cowplot)
plot_grid(boxplot_plot, bar_plot, line_plot, scatter_plot, time_series_plot, violin_plot, stacked_bar_plot, ncol = 2)
# Scatter Plot: Relationship between valence and danceability
scatter_plot <- ggplot(data, aes(x = valence_., y = danceability_.)) +
geom_point() +
labs(title = "Scatter Plot of Valence vs. Danceability", x = "Valence (%)", y = "Danceability (%)")
plot_grid(boxplot_plot, bar_plot, line_plot, scatter_plot, time_series_plot, violin_plot, stacked_bar_plot, ncol = 2)
library(cowplot)
boxplot_plot <- ggplot(data, aes(x = artist(s)_name, y = streams)) +
data <- read.csv("spotify-2023.csv")
View(data)
data <- read.csv("spotify-2023.csv")
# Box Plot: Comparing streams among different artists
boxplot_plot <- ggplot(data, aes(x = artist.s._name, y = streams)) +
geom_boxplot(fill = "blue", color = "black") +
labs(title = "Box Plot of Streams by Artist", x = "Artist", y = "Streams") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bar_plot <- data %>%
group_by(released_year) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(released_year), y = song_count, fill = as.factor(released_year))) +
geom_bar(stat = "identity") +
labs(title = "Number of Songs Released Each Year", x = "Year", y = "Song Count") +
theme(legend.position = "none")
line_plot <- data %>%
group_by(released_year) %>%
summarise(mean_streams = mean(streams)) %>%
ggplot(aes(x = released_year, y = mean_streams)) +
geom_line(color = "blue") +
labs(title = "Change in Streams Over the Years", x = "Year", y = "Mean Streams")
# Scatter Plot: Relationship between valence and danceability
scatter_plot <- ggplot(data, aes(x = valence_%, y = danceability_%)) +
scatter_plot <- ggplot(data, aes(x = valence_., y = danceability_.)) +
geom_point() +
labs(title = "Scatter Plot of Valence vs. Danceability", x = "Valence (%)", y = "Danceability (%)")
# Time Series Plot: Change in streams over time
time_series_plot <- ggplot(data, aes(x = as.Date(paste(released_year, released_month, released_day, sep = "-")), y = streams)) +
geom_line(color = "blue") +
labs(title = "Change in Streams Over Time", x = "Date", y = "Streams")
violin_plot <- ggplot(data, aes(x = in_spotify_playlists, y = streams)) +
geom_violin(fill = "blue") +
labs(title = "Distribution of Streams by Spotify Playlists", x = "In Spotify Playlists", y = "Streams")
stacked_bar_plot <- data %>%
group_by(key) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(key), y = song_count, fill = as.factor(key)))+
geom_bar(stat = "identity") +
labs(title = "Composition of Songs by Key", x = "Key", y = "Song Count")
plot_grid(boxplot_plot, bar_plot, line_plot, scatter_plot, time_series_plot, violin_plot, stacked_bar_plot, ncol = 2)
plot_grid(boxplot_plot)
plot_grid(bar_plot)
plot_grid(line_plot)
plot_grid(scatter_plot)
plot_grid(violin_plot)
plot_grid(time_series_plot)
plot_grid(stacked_bar_plot)
histogram <- ggplot(data, aes(x = streams)) +
geom_histogram(binwidth = 1000000, fill = "blue", color = "black") +
labs(title = "Distribution of Streams", x = "Streams") +
scale_x_continuous(labels = scales::comma)
# Display the histogram
print(histogram)
plot_grid(histogram)
plot_grid(histogram)
plot_grid(histogram)
clean_data <- data %>%
filter(!is.na(streams) & is.numeric(streams))
# Now, you can create the histogram
histogram <- ggplot(clean_data, aes(x = streams)) +
geom_histogram(binwidth = 1000000, fill = "blue", color = "black") +
labs(title = "Distribution of Streams", x = "Streams") +
scale_x_continuous(labels = scales::comma)
print(histogram)
histogram_energy <- ggplot(data, aes(x = energy_.)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black") +
labs(title = "Distribution of Energy Levels", x = "Energy (%)") +
scale_x_continuous(labels = scales::percent_format(scale = 1))
print(histogram_energy)
# Prepare the data for the pie chart
key_counts <- data %>%
group_by(key) %>%
summarise(count = n())
# Create a data frame for the pie chart
key_data <- data.frame(Key = key_counts$key, Count = key_counts$count)
# Create the pie chart
pie_chart_key <- ggplot(key_data, aes(x = "", y = Count, fill = Key)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "Distribution of Songs by Key")
# Display the pie chart
print(pie_chart_key)
plot_grid(stacked_bar_plot)
# Sort the dataset by streams in descending order and select the top 10 songs
top_songs <- data %>%
arrange(desc(streams)) %>%
head(10)
# Create a stacked bar plot for the top 10 songs
stacked_bar_plot <- ggplot(top_songs, aes(x = track_name, y = streams, fill = artist(s)_name)) +
stacked_bar_plot <- ggplot(top_songs, aes(x = track_name, y = streams, fill = artist.s._name)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Songs of the Year (Stacked Bar Plot)", x = "Song", y = "Streams") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the stacked bar plot
print(stacked_bar_plot)
# Plot top 10 songs
ggplot(top_songs, aes(x = reorder(track_name, streams), y = streams)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Most Played Songs")
top_songs <- data %>%
arrange(desc(streams)) %>%
head(10)
# Create a stacked bar plot for the top 10 songs
stacked_bar_plot <- ggplot(top_songs, aes(x = track_name, y = streams, fill = artist.s._name)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Songs of the Year (Stacked Bar Plot)", x = "Song", y = "Streams") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the stacked bar plot
print(stacked_bar_plot)
library(dplyr)
library(ggplot2)
library(cowplot)
library(mongolite)
b_name <- "spotifydb"
collection_name <- "sample"
mongo_uri <- "mongodb://localhost:27017/?readPreference=primary&appname=MongoDB%20Compass&ssl=false"
# Connect to the MongoDB database
mongo_conn <- mongo(collection = collection_name, url = mongo_uri, db = db_name)
db_name <- "spotifydb"
collection_name <- "sample"
mongo_uri <- "mongodb://localhost:27017/?readPreference=primary&appname=MongoDB%20Compass&ssl=false"
# Connect to the MongoDB database
mongo_conn <- mongo(collection = collection_name, url = mongo_uri, db = db_name)
data <- mongo_conn$find('{}')
# Summary statistics and structure of the dataset
str(data)
summary(data)
library(dplyr)
library(ggplot2)
library(cowplot)
library(mongolite)
library(dplyr)
library(ggplot2)
library(cowplot)
library(mongolite)
db_name <- "spotifydb"
collection_name <- "sample"
mongo_uri <- "mongodb://localhost:27017/?readPreference=primary&appname=MongoDB%20Compass&ssl=false"
# Connect to the MongoDB database
mongo_conn <- mongo(collection = collection_name, url = mongo_uri, db = db_name)
data <- mongo_conn$find('{}')
# Summary statistics and structure of the dataset
str(data)
summary(data)
data$released_year <- as.numeric(data$released_year)
data$streams <- as.numeric(data$streams)
# Sort the dataset by streams in descending order and select the top 10 songs
top_songs <- data %>%
arrange(desc(streams)) %>%
head(10)
# Create a stacked bar plot for the top 10 songs
stacked_bar_plot <- ggplot(top_songs, aes(x = track_name, y = streams, fill = artist_name)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Songs of the Year (Stacked Bar Plot)", x = "Song", y = "Streams") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the stacked bar plot
print(stacked_bar_plot)
release_counts <- data %>%
mutate(month = format(release_date, "%B")) %>%
group_by(month) %>%
summarise(song_count = n()) %>%
arrange(desc(song_count))
ggplot(release_counts, aes(x = month, y = song_count)) +
geom_bar(stat = "identity") +
labs(title = "Song Releases by Month")
numeric_data <- data %>%
select(bpm, danceability, valence, energy, acousticness, instrumentalness, liveness, speechiness)
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data)
# Create a heatmap using ggplot2
ggplot(data = as.data.frame(as.table(correlation_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Heatmap")
scatter_plot <- ggplot(data, aes(x = valence, y = danceability)) +
geom_point() +
labs(title = "Scatter Plot of Valence vs. Danceability", x = "Valence (%)", y = "Danceability (%)")
# Violin Plot: Distribution of streams by playlist
violin_plot <- ggplot(data, aes(x = in_spotify_playlists, y = streams)) +
geom_violin(fill = "blue") +
labs(title = "Distribution of Streams by Spotify Playlists", x = "In Spotify Playlists", y = "Streams")
# Stacked Bar Plot: Composition of songs by key
stacked_bar_plot <- data %>%
group_by(key) %>%
summarise(song_count = n()) %>%
ggplot(aes(x = as.factor(key), y = song_count, fill = as.factor(key)))+
geom_bar(stat = "identity") +
labs(title = "Composition of Songs by Key", x = "Key", y = "Song Count")
# Create a 2x4 grid of the plots using cowplot
plot_grid(scatter_plot)
plot_grid(stacked_bar_plot)
plot_grid(violin_plot)
key_data <- data.frame(Key = key_counts$key, Count = key_counts$count)
# Create the pie chart
pie_chart_key <- ggplot(key_data, aes(x = "", y = Count, fill = Key)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "Distribution of Songs by Key")
# Display the pie chart
print(pie_chart_key)
